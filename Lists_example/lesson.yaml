- Class: meta
  Course: STS_ST07
  Lesson: Lists_example
  Author: Rebecca Dauwe
  Type: Standard
  Organization: UPJV
  Version: 2.4.3

- Class: text
  Output: The output of many functions is under the form of a "list". In this lesson, you will learn how to get most out of these functions, by accessing to these lists.
  
- Class: text
  Output: "As an example, we will have a look at the t.test() function."
  
- Class: text
  Output: "t.test() applied on a single variable tests if the the mean is significantly different from 0.
    The return value of t.test() comprises an estimate of the population mean (this estimate = the sample mean) and a 95% confidence interval of the population mean."
  
- Class: cmd_question
  Output: "In the help page of a function, you can see what the return value (= the output) is under 'Value'. Type ?t.test, and check out the Value"
  CorrectAnswer: ?t.test
  AnswerTests: omnitest(correctExpr='?t.test')
  Hint: "?t.test"
  
- Class: mult_question
  Output: "What is the format of the return value of t.test?"
  AnswerChoices: a vector;a matrix;a data frame;a list;an undefined object
  AnswerTests: omnitest(correctVal = 'a list')
  Hint: "Read the first sentence under 'Value' in the help page of t.test."
    
- Class: text
  Output: "You can see that the value of this function is 'A list with class htest containing the following components:...'."

- Class: text
  Output: "Most of the time, you will first assign the ouput of the function to a new object. Then you can access to the different components of this object via the ways we learnt for lists: [[]], or [] or $."
 
- Class: cmd_question
  Output: "To try this out, create a vector called v, of 50 numbers, with mean 100, and standard deviation 10. 
    Use the rnorm() function to create this vector.
    You can always have a look at ?rnorm if you need some help."
  CorrectAnswer: v <- rnorm(50, mean = 100, sd = 10)
  AnswerTests: any_of_exprs('v <- rnorm(50, mean = 100, sd = 10)', 'v <- rnorm(50, 100, 10)', 'v <- rnorm(n = 50, mean = 100, sd = 10)')
  Hint: "Type: v <- rnorm(50, mean = 100, sd = 10)"
 
- Class: cmd_question
  Output: Apply the function t.test() on your vector v, and store the ouput as an object called tt
  CorrectAnswer: tt <- t.test(v)
  AnswerTests: omnitest(correctExpr='tt <- t.test(v)')
  Hint: "Type: tt <- t.test(v)"

- Class: cmd_question
  Output: "Type tt to have a look at the output"
  CorrectAnswer: tt
  AnswerTests: omnitest(correctExpr='tt')
  Hint: "Type: tt"
  
- Class: cmd_question
  Output: "This only gave you a summary of the output of the t.test() function. To see what information is hidden in the object tt, and the detailed structure, which will allow you to access to these data, type str(tt)."
  CorrectAnswer: str(tt)
  AnswerTests: omnitest(correctExpr='str(tt)')
  Hint: "str(tt)"
 
- Class: cmd_question
  Output: "Examine well the output of str(tt), and extract from tt specifically the mean of your vector v. The output of your command should be a numeric vector with one element (not a list!). (Remember, the estimate of the mean of the population from which v is a sample, is the sample mean of v.) "
  CorrectAnswer: tt$estimate
  AnswerTests: any_of_exprs('tt$estimate', 'tt[[5]]', 'tt[["estimate"]]')
  Hint: "Mean of the sample = estimate of population mean. tt is a list, so you access to the components with $ or [[]]."

- Class: exact_question
  Output: What is the mean of the population of which your vector v is a sample?
    (Not a statistics course here, but just to put things in context.)
  CorrectAnswer: 100
  AnswerTests: omnitest(correctVal = 100)
  Hint: Remember, you created vector v using the rnorm() function...

- Class: cmd_question
  Output: "Of course, the population mean, as estiamted based on sample v, was not exact! But does the population mean lie within the 95% confidence interval, as calculated based on sample v? Extract the 95% confidence interval from tt."
  CorrectAnswer: tt$conf.int
  AnswerTests: any_of_exprs('tt$conf.int', 'tt[[4]]', 'tt[["conf.int"]]')
  Hint: "Examine str(tt). tt is a list, so you access to the components with $ or [[]]."
  
- Class: cmd_question
  Output: "You see that it has an attribute: the confidence level. Try to get just a vector of two values: the lower and upper limit of the 95% confidence interval, without attribute"
  CorrectAnswer: tt$conf.int[1:2]
  AnswerTests: any_of_exprs('tt$conf.int[1:2]', 'tt[[4]][1:2]', 'tt[["conf.int"]][1:2]', 'tt$conf.int[c(1,2)]', 'tt[[4]][c(1,2)]', 'tt[["conf.int"]][c(1,2)]')
  Hint: "Think about subsetting the output of the question above."
  
- Class: cmd_question
  Output: "Now, extract the mean and the p.value (in that order) of the t.test() output tt."
  CorrectAnswer: tt[c("estimate","p.value")]
  AnswerTests: any_of_exprs('tt[c("estimate","p.value")]', 'tt[c(5,3)]')
  Hint: "You can access the elements by index or by name, and you will need to bind names or indexes together, within [], using c()."
  
- Class: cmd_question
  Output: "What is the class of the output of the previous question?"
  CorrectAnswer: class(tt[c("estimate","p.value")])
  AnswerTests: any_of_exprs('class(tt[c("estimate","p.value")])', 'class(tt[c(5,3)])')
  Hint: "Feed the command of the previous question to the class() function."
  
- Class: text
  Output: "Aha! Here you could not access to both elements using the [[]] bucket. This only works for a single element. You needed to use single brackets [], and therefore, the output remains a list!"
  
- Class: text
  Output: "You do prefer to have a vector, so that you can bind results of different variables together in a table. But no worries, a simple list can always been transformed into a vector using the unlist() function!"

- Class: cmd_question
  Output: "Again, extract the mean and the p.value (in that order) of tt, and, in the same command, unlist the output."
  CorrectAnswer: unlist(tt[c("estimate","p.value")])
  AnswerTests: any_of_exprs('unlist(tt[c("estimate","p.value")])', 'unlist(tt[c(5,3)])')
  Hint: "The same like the question above, but replace class() by unlist()"
  
- Class: text
  Output: "Hurray! You now know how to extract the most out of the output of the functions you are going to apply!"


- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Rebecca may evaluate your progress.
  AnswerChoices: Sure, no problem
  CorrectAnswer: Sure, no problem
  AnswerTests: submit_log()
  Hint: hint, select "Sure, no problem"!
  